<?xml version="1.0" encoding="UTF-8"?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xml:id="tx">
  <title>Redis Transactions</title>
  <para>Redis provides support for <ulink url="http://redis.io/topics/transactions">transactions</ulink> through the <literal>multi</literal>,
    <literal>exec</literal>, and <literal>discard</literal> commands. These operations are available on <interfacename>RedisTemplate</interfacename>,
    however <interfacename>RedisTemplate</interfacename> is not guaranteed to execute all operations in the transaction using the same connection.
  </para>

   <para>Spring Data Redis provides the <interfacename>SessionCallback</interfacename> interface for use when multiple operations need to be performed with the same <literal>connection</literal>,
   as when using Redis transactions. For example:
   </para>

   <programlisting language="java"><![CDATA[ //execute a transaction
List<Object> txResults = redisTemplate.execute(new SessionCallback<List<Object>>() {
    public List<Object> execute(RedisOperations operations) throws DataAccessException {
        operations.multi();
        operations.opsForSet().add("key", "value1");
        // This will contain the results of all ops in the transaction
        return operations.exec();
    }
});
System.out.println("Number of items added to set: " + txResults.get(0));
]]></programlisting>

   <para><classname>RedisTemplate</classname> will use its value, hash key, and hash value serializers to deserialize all results of <literal>exec</literal>
   before returning. There is an additional <literal>exec</literal> method that allows you to pass a custom serializer for transaction results.
   </para>

   <note>An important change has been made to the <literal>exec</literal> methods of <interfacename>RedisConnection</interfacename> and <classname>RedisTemplate</classname>
    in version 1.1. Previously these methods returned the results of transactions directly from the connectors. This means that the data types often differed from those
	returned from the methods of <interfacename>RedisConnection</interfacename>. For example, <literal>zAdd</literal> returns a boolean indicating
	that the element has been added to the sorted set. Most connectors return this value as a long and Spring Data Redis performs the conversion. Another common
	difference is that most connectors return a status reply (usually the String "OK") for operations like <literal>set</literal>. These replies are typically discarded by Spring Data Redis.
	Prior to 1.1, these conversions were not performed on the results of <literal>exec</literal>. Also, results were not deserialized in <classname>RedisTemplate</classname>, so they
	often included raw byte arrays. If this change breaks your application, you can
	set <literal>convertPipelineAndTxResults</literal> to false on your <interfacename>RedisConnectionFactory</interfacename> to disable this behavior.
	</note>
	<section id="tx.spring">
		<title><interfacename>@Transactional</interfacename> Support</title>
		<para>Transaction Support is disabled by default and has explicitly to be enabled for each <classname>RedisTemplate</classname> in use by setting <literal>setEnableTransactionSupport(true)</literal>.
		This will force binding the <interfacename>RedisConnection</interfacename> in use to the current <classname>Thread</classname> triggering <literal>MULTI</literal>. If the transaction finishes without errors, <literal>EXEC</literal> is called, otherwise <literal>DISCARD</literal>. 
		As once in <literal>MULTI</literal>, <classname>RedisConnection</classname> would queue read operations, all <literal>readonly</literal> operations, such as <literal>KEYS</literal> are piped to a fresh (non thread bound) <interfacename>RedisConnection</interfacename>.
		</para>
		<programlisting language="java"><![CDATA[ /** Sample Configuration **/
@Configuration
public class RedisTxContextConfiguration {

	@Bean
	public StringRedisTemplate redisTemplate() {

		StringRedisTemplate template = new StringRedisTemplate(redisConnectionFactory());

		// explicitly enable transaction support
		template.setEnableTransactionSupport(true);
		return template;
	}


	@Bean
	public PlatformTransactionManager transactionManager() throws SQLException {
		return new DataSourceTransactionManager(dataSource());
	}

	@Bean
	public RedisConnectionFactory redisConnectionFactory(
		// jedis, lettuce, srp,...
	);


	@Bean
	public DataSource dataSource() throws SQLException {
		// ...
	}
}
]]></programlisting>
	<programlisting language="java"><![CDATA[ /** Usage Constrainsts **/
	
	// exectuted on thread bound connection
	template.opsForValue().set("foo", "bar");
	
	// read operation executed on fee connection
	template.keys("*");
	
	// returns null as values set within transaction are not visible
	template.opsForValue().get("foo");
]]></programlisting>

	</section>
</section>